services:


  # https://github.com/filamentphp/demo
  # http://127.0.0.1:8002
  # docker compose exec fd sh
  # docker compose up -d --no-deps --build fd
  fd:
    build:
      context: .
      dockerfile: ./docker/php82.Dockerfile
    depends_on:
      - dbmsql
    # networks:
    #   - internal
    ports:
      - "127.0.0.1:8002:80"
    environment:
      APP_URL: http://localhost:8001/
      DB_CONNECTION: mysql
      DB_HOST: dbmsql
      DB_NAME: filament-demo
      DB_USER: filament-demo
      DB_PASSWORD: filament-demo
    volumes:
      - ./:/app


  # cli tools
  #
  # docker compose exec cli bash
  # docker compose up -d --no-deps --build cli
  cli:
    # image: ubuntu:latest
    # working_dir: /app
    build:
      context: .
      dockerfile: ./docker/cli.Dockerfile
    volumes:
      - ./:/app
    # command: tail -f /dev/null


  # DB manager
  # http://127.0.0.1:8000
  # docker compose exec adminer sh
  # docker compose up -d --no-deps --build adminer
  adminer:
    image: wodby/adminer
    depends_on:
      - dbmsql
    # networks:
    #   - internal
    restart: unless-stopped
    ports:
      - 8000:9000
    environment:
      ADMINER_DEFAULT_DB_HOST: dbmsql:3306
      ADMINER_DEFAULT_DB_NAME: ${MYSQL_DB_NAME}
    volumes:
      - ./data:/app
      - ./docker/adminer/login-password-less.php:/var/www/html/plugins-enabled/login-password-less.php


  # docker compose up -d --no-deps --build dbmsql
  dbmsql:
    image: mysql:8.0
    restart: unless-stopped
    # networks:
    #   - internal
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ${MYSQL_DB_NAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./data/dbmsql:/var/lib/mysql


  # docker compose up -d --no-deps --build dbmsql5
  dbmsql5:
    image: mysql:5.7
    platform: linux/x86_64
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ${MYSQL_DB_NAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./data/dbmsql5:/var/lib/mysql


  # docker compose up -d --no-deps --build dbpsql
  # http://127.0.0.1:8000/?pgsql=dbpsql&username=local
  dbpsql:
    image: postgres
    restart: unless-stopped
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    volumes:
      # - ../2. Init Database:/docker-entrypoint-initdb.d
      - ./data/dbpsql:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: local
      POSTGRES_USER: local
      POSTGRES_PASSWORD: local
      PGDATA: "/var/lib/postgresql/data/pgdata"

  redis:
    image: redis
    container_name: cache
    expose:
      - 6379


# networks:
  # internal:
    # driver: bridge
  # default:
    # external: true
    # name: scoobydoo



  # # http://127.0.0.1:8003
  # # docker compose up -d --no-deps --build wp
  # wp:
  #   image: wordpress
  #   depends_on:
  #     - dbmsql
  #   # networks:
  #   #   - internal
  #   ports:
  #     - "8003:80"
  #   environment:
  #     WORDPRESS_DB_HOST: dbmsql:3306
  #     WORDPRESS_DB_NAME: ${MYSQL_DB_NAME}
  #     WORDPRESS_DB_USER: ${MYSQL_USER}
  #     WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
  #   volumes:
  #     - ./wp:/var/www/html/wp-content


  # http://127.0.0.1:81
  # doc https://nginxproxymanager.com/ 
  # docker compose exec app bash
  # docker compose up -d --no-deps --build app
  # app:
  #   image: jc21/nginx-proxy-manager:latest
  #   restart: unless-stopped
  #   ports:
  #     # - '80:80'
  #     - '81:81'
  #     - '443:443'
  #   volumes:
  #     - ./data/proxy:/data
  #     - ./letsencrypt:/etc/letsencrypt
