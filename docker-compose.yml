services:

  # http://localhost:8080/
  # docker compose exec app sh
  # docker compose up -d --no-deps --build app
  app:
    build:
      context: .
      dockerfile: ./docker/php82.Dockerfile
    depends_on:
      - dbmsql
    ports:
      - "8080:8000"
    command: php artisan serve --host 0.0.0.0
    environment:
      APP_URL: http://localhost:8080/
      DB_CONNECTION: mysql
      DB_HOST: dbmsql:3306
      DB_NAME: ${MYSQL_DB_NAME}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
    working_dir: /app
    volumes:
      - ./code/:/app

  # http://localhost:8081/
  # http://localhost:8081/lunar
  # docker compose exec lunar sh
  # docker compose up -d --no-deps --build lunar
  lunar:
    build:
      context: .
      dockerfile: ./docker/php82.Dockerfile
    depends_on:
      - dbmsql
    ports:
      - "8081:8000"
    command: php artisan serve --host 0.0.0.0
    environment:
      APP_URL: http://localhost:8081/
      DB_CONNECTION: mysql
      DB_HOST: dbmsql:3306
      DB_NAME: lunar
      DB_USER: root
      DB_PASSWORD: root
    working_dir: /app
    volumes:
      - ./lunar/:/app


  # cli tools
  #
  # docker compose exec cli bash
  # docker compose up -d --no-deps --build cli
  cli:
    # image: ubuntu:latest
    # working_dir: /app
    build:
      context: .
      dockerfile: ./docker/cli.Dockerfile
    volumes:
      - ./:/app
    # command: tail -f /dev/null


  # DB manager
  # http://127.0.0.1:8000
  # docker compose exec adminer sh
  # docker compose up -d --no-deps --build adminer
  adminer:
    image: wodby/adminer
    depends_on:
      - dbmsql
    # networks:
    #   - internal
    restart: unless-stopped
    ports:
      - 8000:9000
    environment:
      ADMINER_DEFAULT_DB_HOST: dbmsql:3306
      ADMINER_DEFAULT_DB_NAME: ${MYSQL_DB_NAME}
    # volumes:
      # - ./data:/app
      # - ./docker/adminer/login-password-less.php:/var/www/html/plugins-enabled/login-password-less.php


  # docker compose up -d --no-deps --build dbmsql
  dbmsql:
    image: mysql:8.0
    restart: unless-stopped
    # networks:
    #   - internal
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ${MYSQL_DB_NAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./data/dbmsql:/var/lib/mysql


  # docker compose up -d --no-deps --build dbpsql
  # http://127.0.0.1:8000/?pgsql=dbpsql&username=local
  dbpsql:
    image: postgres
    restart: unless-stopped
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    volumes:
      # - ../2. Init Database:/docker-entrypoint-initdb.d
      - ./data/dbpsql:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: local
      POSTGRES_USER: local
      POSTGRES_PASSWORD: local
      PGDATA: "/var/lib/postgresql/data/pgdata"

  # docker compose up -d --no-deps --build redis
  redis:
    image: redis
    expose:
      - 6379

